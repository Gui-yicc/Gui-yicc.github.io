{"meta":{"title":"奈良季夏","subtitle":"我的愿望是世界和平:D","description":"陈燕飞的博客","author":"妫乙","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"解决react+antd-mobile修改主题样式的问题","slug":"react-antd-mobile修改主题样式的问题","date":"2017-08-29T07:53:33.000Z","updated":"2017-08-29T08:41:45.609Z","comments":true,"path":"2017/08/29/react-antd-mobile修改主题样式的问题/","link":"","permalink":"http://yoursite.com/2017/08/29/react-antd-mobile修改主题样式的问题/","excerpt":"","text":"方法为通过less-loader的modifyVars来修改原来的默认less，需要安装style-loader，css-loader，less-loader，postcss-loader，如报错没有找到某些模块，再自行安装相应模块 修改 项目根目录/node_modules/react-scripts/config/webpack.config.dev.js文件 在代码var path = require( &#39;path&#39; );后添加代码 12345678910111213141516var fs = require( &apos;fs&apos; )const pkgPath = path.join( process.cwd(), &apos;package.json&apos; );const getTheme = ( pkgPath ) =&gt; &#123;if ( fs.existsSync( pkgPath ) ) &#123; const pkg = require( pkgPath ) console.log( typeof ( pkg.theme ) ) if ( typeof ( pkg.theme ) === &apos;object&apos; &amp;&amp; pkg.theme.constructor === Object ) &#123; return themeContent &#125; else &#123; const themePath = path.join( process.cwd(), pkg.theme ) const themeContent = require( themePath )() return themeContent &#125;&#125;&#125;var themeContent = JSON.stringify( getTheme( pkgPath ) ).replace( /_/g, &apos;-&apos; ) 然后在exclude内添加 /\\.less$/（注意添加逗号） 在loaders对象数组内添加（注意添加逗号） 1234&#123; test: /\\.less$/, loader: &apos;style!css!postcss!less?&#123;modifyVars:&apos; + themeContent + &apos;&#125;&apos;&#125; 修改根目录的package.json文件，添加代码 1&quot;theme&quot;: &quot;./theme.js&quot; 在根目录添加theme.js文件，文件中代码如下，brand_primary为主题色，如需修改其他颜色，可进入node_modules/antd-mobile/lib/style/theme/default.less查看以作相应修改 123module.exports = () =&gt; (&#123; brand_primary: &apos;green&apos;,&#125;) 修改.balelrc内的&quot;style&quot;: &quot;css&quot;为&quot;style&quot;: true 大功告成","categories":[],"tags":[{"name":"antd-mobile","slug":"antd-mobile","permalink":"http://yoursite.com/tags/antd-mobile/"},{"name":"react","slug":"react","permalink":"http://yoursite.com/tags/react/"}]},{"title":"关于react的事件代理","slug":"关于react的事件代理","date":"2017-08-27T12:06:01.000Z","updated":"2017-08-27T14:50:26.108Z","comments":true,"path":"2017/08/27/关于react的事件代理/","link":"","permalink":"http://yoursite.com/2017/08/27/关于react的事件代理/","excerpt":"","text":"今天在写react列表的时候在想，我们给每个列表元素绑定事件,如果元素很多不就造成浪费了么所以写了个列表研究下react的事件绑定代码如下123456789const listData = [1, 2, 3, 4, 5]const liList = listData.map(( ele, index ) =&gt; &lt;li key=&#123;index&#125; onClick=&#123;() =&gt; console.log( index )&#125;&gt; &#123;ele&#125; &lt;/li&gt;)return ( &lt;ul&gt;&#123;liList&#125;&lt;/ul&gt;) 打开chrome发现 li 元素上绑定有两个事件将两个绑定的事件remove后再点击 li 元素，发现还是能console出相应的index=。=然后网上翻了下，找到了原因:jsx不会真正的绑定事件到每一个具体的元素上，而是采用事件代理的模式：在根节点document上为每种事件添加唯一的listener，然后通过事件的target找到真实的触发元素，这样从触发元素到顶层节点之间的所有节点如果有绑定这个事件，react都会触发相应的事件处理函数，这就是所谓的react模拟事件系统随后在chrome中删除了body上绑定的点击事件后果然不再console出index了。","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://yoursite.com/tags/react/"}]},{"title":"博客进化","slug":"博客进化","date":"2017-08-26T16:05:45.000Z","updated":"2017-08-26T16:13:56.536Z","comments":true,"path":"2017/08/27/博客进化/","link":"","permalink":"http://yoursite.com/2017/08/27/博客进化/","excerpt":"","text":"博客生成的页面跳转还是a标签直接跳页面的,感觉弄成类似spa的那种感觉会好一些.","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"}]},{"title":"今天开始","slug":"今天开始","date":"2017-08-20T10:08:07.000Z","updated":"2017-08-20T10:19:49.777Z","comments":true,"path":"2017/08/20/今天开始/","link":"","permalink":"http://yoursite.com/2017/08/20/今天开始/","excerpt":"","text":"今天是17年8月20日，原来一直有打算搭个博客来记录一些东西，不过由于拖延癌的原因直到现在才弄完，虽然弄完也只花了几个钟头2333，总之，加油吧 自己","categories":[],"tags":[{"name":"start","slug":"start","permalink":"http://yoursite.com/tags/start/"}]}]}